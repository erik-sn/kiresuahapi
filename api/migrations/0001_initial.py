# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-21 19:41
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(db_column='created', default=django.utils.timezone.now)),
                ('modified', models.DateTimeField(db_column='edited', default=django.utils.timezone.now)),
                ('title', models.TextField(db_column='title')),
                ('description', models.TextField(blank=True, db_column='description', null=True)),
                ('content', models.TextField(blank=True, db_column='content', null=True)),
                ('published', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(db_column='owner', default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'managed': True,
                'db_table': 'articles',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(db_column='created', default=django.utils.timezone.now)),
                ('modified', models.DateTimeField(db_column='edited', default=django.utils.timezone.now)),
                ('name', models.TextField(db_column='name')),
            ],
            options={
                'managed': True,
                'db_table': 'tags',
            },
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, to='api.Tag'),
        ),
    ]
